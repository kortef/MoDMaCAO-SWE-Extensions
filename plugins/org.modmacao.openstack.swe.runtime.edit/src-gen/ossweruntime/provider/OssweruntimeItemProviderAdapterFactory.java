/**
 * Copyright (c) 2015-2017 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 */
package ossweruntime.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import ossweruntime.util.OssweruntimeAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OssweruntimeItemProviderAdapterFactory extends OssweruntimeAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OssweruntimeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Swe_small} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Swe_smallItemProvider swe_smallItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Swe_small}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwe_smallAdapter() {
		if (swe_smallItemProvider == null) {
			swe_smallItemProvider = new Swe_smallItemProvider(this);
		}

		return swe_smallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Swe_medium} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Swe_mediumItemProvider swe_mediumItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Swe_medium}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwe_mediumAdapter() {
		if (swe_mediumItemProvider == null) {
			swe_mediumItemProvider = new Swe_mediumItemProvider(this);
		}

		return swe_mediumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Swe_large} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Swe_largeItemProvider swe_largeItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Swe_large}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwe_largeAdapter() {
		if (swe_largeItemProvider == null) {
			swe_largeItemProvider = new Swe_largeItemProvider(this);
		}

		return swe_largeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Swe_mem_small} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Swe_mem_smallItemProvider swe_mem_smallItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Swe_mem_small}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwe_mem_smallAdapter() {
		if (swe_mem_smallItemProvider == null) {
			swe_mem_smallItemProvider = new Swe_mem_smallItemProvider(this);
		}

		return swe_mem_smallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Swe_mem_medium} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Swe_mem_mediumItemProvider swe_mem_mediumItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Swe_mem_medium}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwe_mem_mediumAdapter() {
		if (swe_mem_mediumItemProvider == null) {
			swe_mem_mediumItemProvider = new Swe_mem_mediumItemProvider(this);
		}

		return swe_mem_mediumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Swe_mem_large} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Swe_mem_largeItemProvider swe_mem_largeItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Swe_mem_large}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwe_mem_largeAdapter() {
		if (swe_mem_largeItemProvider == null) {
			swe_mem_largeItemProvider = new Swe_mem_largeItemProvider(this);
		}

		return swe_mem_largeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Ubuntu_trustytahr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Ubuntu_trustytahrItemProvider ubuntu_trustytahrItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Ubuntu_trustytahr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbuntu_trustytahrAdapter() {
		if (ubuntu_trustytahrItemProvider == null) {
			ubuntu_trustytahrItemProvider = new Ubuntu_trustytahrItemProvider(this);
		}

		return ubuntu_trustytahrItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ossweruntime.Ubuntu_xenialxerus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Ubuntu_xenialxerusItemProvider ubuntu_xenialxerusItemProvider;

	/**
	 * This creates an adapter for a {@link ossweruntime.Ubuntu_xenialxerus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUbuntu_xenialxerusAdapter() {
		if (ubuntu_xenialxerusItemProvider == null) {
			ubuntu_xenialxerusItemProvider = new Ubuntu_xenialxerusItemProvider(this);
		}

		return ubuntu_xenialxerusItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (swe_smallItemProvider != null) swe_smallItemProvider.dispose();
		if (swe_mediumItemProvider != null) swe_mediumItemProvider.dispose();
		if (swe_largeItemProvider != null) swe_largeItemProvider.dispose();
		if (swe_mem_smallItemProvider != null) swe_mem_smallItemProvider.dispose();
		if (swe_mem_mediumItemProvider != null) swe_mem_mediumItemProvider.dispose();
		if (swe_mem_largeItemProvider != null) swe_mem_largeItemProvider.dispose();
		if (ubuntu_trustytahrItemProvider != null) ubuntu_trustytahrItemProvider.dispose();
		if (ubuntu_xenialxerusItemProvider != null) ubuntu_xenialxerusItemProvider.dispose();
	}

}
